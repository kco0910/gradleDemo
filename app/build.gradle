apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.fly.groovydemo"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

task copyTask(type:Copy){//type 类似于extends
    println("copyTask")
    from 'E:\\copy'
    into 'E:\\copy1'
}

task copyTask2(type:Copy){
    println("copyTask2")
    from 'E:\\copy','E:\\fenxi\\2018-1-29'
    into 'E:\\copy1'
}

task copyTask3(type:Copy){
    println("copyTask3")
    from 'E:\\copy'
    into 'E:\\copy1'
    include "*.apk" //只复制apk文件
}

task copyTask4(type: Copy){//复制apk文件，单不复制ee.apk
    println("copyTask4")
    from 'E:\\copy'
    into 'E:\\copy1'
    include "*.apk"
    exclude "ee.apk"
}

task copyTask5(type: Copy){//复制apk文件，然后将一个文件改名,改名后如果文件名冲突，会覆盖文件
    println("copyTask5")
    from 'E:\\copy'
    into 'E:\\copy1'
    rename("ee.apk","cc.apk")
}

task delTask(type: Delete){ //删除目录及文件
    println("delTask")
    delete("E:\\copy1")
}



//task mTask2{} 在任何task执行的时候就会执行

task (mTask3).doFirst{ //在其他task任务执行前执行
    println("mTask3")
}

task(test2).doLast{ //在其他task任务执行后执行
    testFile()
}

project.task("test4").doLast{ //相当于.doLast
    println("test4")
}
//定义一个名字为test5的task ,分组为fj,描述："我的task",依赖于test2,task4
project.task("test5",group: "fj",description: "我的task",dependsOn: ["test2","test4"]).doLast {
    println("test5")
}
project.task("test5").doLast {
    description ="我的task"
    group = 'fj'
    dependsOn = ["test2","test4"]
}


test4.mustRunAfter test2 //运行test4之前先运行test2, 执行指令 gradlew test4 test2



void testFile(){
    println("文件方法测试")
    println("使用两个参数")
    def file1 = new File("doc/doc")
    file1.eachLine {line,lineNo->
        println("${lineNo} ${line}")
    }
    println("使用1个参数")
    def file2 = new File("README.md")
    file2.eachLine {line->
//        println("${line}")
        println(line)
    }
}







